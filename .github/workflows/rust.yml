name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  locate:
    name: Locate Cargo.toml files
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.locate.outputs.dirs }}
    steps:
      - uses: actions/checkout@v4

      - name: Locate Cargo.toml files
        id: locate
        run: |
          echo "Locating Cargo.toml files..."
          dirs=$(find "$GITHUB_WORKSPACE" -name "Cargo.toml" -exec dirname {} \; | sort -u | paste -sd "," -)
          echo "dirs=$dirs" >> $GITHUB_ENV

  lint:
    name: Lint all projects
    runs-on: ubuntu-latest
    needs: locate
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - name: Lint projects
        run: |
          IFS=',' read -ra DIRS <<< "${{ needs.locate.outputs.dirs }}"
          for dir in "${DIRS[@]}"; do
            echo "Linting $dir"
            cd "$dir"
            cargo clippy --all-targets -- -D warnings
          done
        shell: bash

  test:
    name: Test all projects
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Test projects
        run: |
          IFS=',' read -ra DIRS <<< "${{ needs.locate.outputs.dirs }}"
          for dir in "${DIRS[@]}"; do
            echo "Testing $dir"
            cd "$dir"
            cargo test --verbose
          done
        shell: bash

  build:
    name: Build all projects
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Build projects
        run: |
          IFS=',' read -ra DIRS <<< "${{ needs.locate.outputs.dirs }}"
          for dir in "${DIRS[@]}"; do
            echo "Building $dir"
            cd "$dir"
            cargo build --verbose --release
          done
        shell: bash