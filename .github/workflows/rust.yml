name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - name: Install Dependencies
        run: cargo fetch

      - name: Locate Cargo.toml files
        id: locate-cargo-files
        run: |
          echo "Locating Cargo.toml files..."
          if [ "${{ runner.os }}" == "Windows" ]; then
            $dirs = (Get-ChildItem -Path $env:GITHUB_WORKSPACE -Filter Cargo.toml -Recurse | Select-Object -ExpandProperty DirectoryName | Select-Object -Unique) -join ','
            echo "dirs=$dirs" >> $env:GITHUB_OUTPUT
          else
            dirs=$(find "$GITHUB_WORKSPACE" -name "Cargo.toml" -exec dirname {} \; | sort -u | paste -sd "," -)
            echo "dirs=$dirs" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Lint all projects
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.locate-cargo-files.outputs.dirs }}"
          for dir in "${DIRS[@]}"; do
            echo "Linting $dir"
            cd "$dir"
            cargo clippy --all-targets -- -D warnings
          done
        shell: bash

      - name: Test all projects
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.locate-cargo-files.outputs.dirs }}"
          for dir in "${DIRS[@]}"; do
            echo "Testing $dir"
            cd "$dir"
            cargo test --verbose
          done
        shell: bash

      - name: Build all projects
        run: |
          IFS=',' read -ra DIRS <<< "${{ steps.locate-cargo-files.outputs.dirs }}"
          for dir in "${DIRS[@]}"; do
            echo "Building $dir"
            cd "$dir"
            cargo build --verbose --release
          done
        shell: bash